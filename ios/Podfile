# Uncomment this line to define a global platform for your project
# platform :ios, '12.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
# ENV['COCOAPODS_DISABLE_STATS'] = 'true'

# source 'https://github.com/CocoaPods/Specs.git'
# source 'https://github.com/JivoChat/JMSpecsRepo.git'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!
  # pod 'JivoSDK' #, '~> 3.0'

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

use_frameworks!

# target 'Runner' do
#   pod 'JivoSDK' #, '~> 3.0'
# end

post_install do |installer|
  # JivoPatcher.new(installer).patch()
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
  end
end

# class JivoPatcher
#   def initialize(installer)
#     @sdkname = "JivoSDK"
#     @installer = installer
#   end
  
#   def patch()
#     libnames = collectLibNames()
    
#     @installer.pods_project.targets.each do |target|
#       if target.respond_to?(:product_type) and target.product_type == "com.apple.product-type.bundle"
#         target.build_configurations.each do |config|
#           config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
#         end
#       end
      
#       target.build_configurations.each do |config|
#         if libnames.include? target.to_s
#           config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
#           # config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
#           # config.build_settings['GENERATE_INFOPLIST_FILE'] = 'YES'
#         end
#       end
#     end
#   end
  
#   private def collectLibNames()
#     depnames = Array.new
    
#     @installer.pod_targets.each do |target|
#       next if target.to_s != @sdkname
#       depnames = collectTargetLibNames(target)
#     end
    
#     return depnames.uniq()
#   end

#   private def collectTargetLibNames(target)
#     depnames = [target.to_s]
    
#     target.dependent_targets.each do |subtarget|
#       depnames += [subtarget.to_s] + collectTargetLibNames(subtarget)
#     end
    
#     return depnames
#   end
# end
